#
class Solution:
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        ls = len(s)
        lp = len(p)
        dp = [0]*(ls+1)
        dp[0] = 1
        for i in range(lp):
            dp1 = [0]*(ls+1)
            if p[i]=='*':
                dp1[0] = dp[0]
                for j in range(1,ls+1):
                    dp1[j] = dp1[j-1] or dp[j]
            elif p[i]=='?':
                dp1 = [0]+dp[:-1]
            else:
                for j in range(ls):
                    if p[i]==s[j]:
                        dp1[j+1] = dp[j]
            dp = dp1
            if sum(dp)==0:
                return False
        return dp[ls]==1
#
class Solution(object):
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        transfer = {}
        state = 0
        
        for char in p:
            if char == '*':
                transfer[state, char] = state
            else:
                transfer[state, char] = state + 1
                state += 1
        
        accept = state
        state = set([0])
        
        for char in s:
            state = set([transfer.get((at, token)) for at in state for token in [char, '*', '?']])
        
        return accept in state
#
class Solution:
    def isMatch(self,s,p):

        n, m = len(s), len(p)
        d = [[0] * (m + 1) for i in
             range(n + 1)]  # d[i,j]=indicator that s[:i] matches with p[:j], for i=0,1,...,n and j=0,1,...,m.

        # Boundary conditions
        d[0][0] = 1
        for j in range(m):
            if p[j] == '*':
                d[0][j + 1] = d[0][j]
        for i in range(1, n + 1):
            d[i][0] = 0  # this for loop is unnecessary

        # Recursive update
        for i in range(n):
            for j in range(m):
                if p[j] == s[i] or p[j] == '?':
                    d[i + 1][j + 1] = d[i][j]
                elif p[
                    j] == '*':  # In this case, p[j] can match with (1) empty sequence, (2) s[i], (3) s[i-k:i+1] for some k.
                    # For case1, we have d[i+1][j+1]=d[i+1][j]; for case2 we have d[i+1][j+1]=d[i][j]; and for
                    # the lase case, we have d[i+1][j+1]=d[i][j+1]. Thus the recursion.
                    d[i + 1][j + 1] = max(max(d[i][j], d[i + 1][j]), d[i][j + 1])

        return d[n][m] == 1
#

#
#
#
