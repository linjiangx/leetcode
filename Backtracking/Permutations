#
class Solution:
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        if not nums:
            return []
        if len(nums) == 1:
            return [nums]
        prev, cur = [[nums[0]]], []
        for i in range(1,len(nums)):
            for j in range(i+1):
                for ele in prev:
                    cur.append(ele[:j]+[nums[i]]+ele[j:]) 
            prev, cur = cur, []
        return prev
#
class Solution:
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        n = len(nums)
        if n < 1: return [[]]
        
        def DFS(nums, level, current, res):
            if level == n: res.append(current)
            else:
                for num in nums:
                    if num not in current: # I wonder if this will be even faster with a set
                        DFS(nums, level+1, current + [num], res)
        
        res = []
        DFS(nums,0,[],res)
        return res
#
#

#
