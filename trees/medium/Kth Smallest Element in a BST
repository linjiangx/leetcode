#在二叉搜索树中找到第K小的,这个是先生成list，再取第K个
class Solution(object):
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        count = []
        self.helper(root, count)
        return count[k-1]
        
    def helper(self, node, count):
        if not node:
            return
        
        self.helper(node.left, count)
        count.append(node.val)
        self.helper(node.right, count)
#
class Solution(object):
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        
        s, counter = [], 0
        curr = root
        
        while len(s) > 0 or curr:
            while curr:
                s.append(curr)
                curr = curr.left
            curr = s.pop()   
            counter += 1
            if counter == k:
                return curr.val
            curr = curr.right
            
#
#
#

#
#
