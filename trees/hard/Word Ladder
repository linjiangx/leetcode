#
import collections
import string

class Solution(object):
	def ladderLength(self, beginWord, endWord, wordList):
		"""
		:type beginWord: str
		:type endWord: str
		:type wordList: List[str]
		:rtype: int
		"""
		word_list_lookup = set(wordList)
		explored = {beginWord: 1}
		frontier = collections.deque()
		frontier.append(beginWord)
		while frontier:
			expand = frontier.popleft()

			for idx in range(len(expand)):
				for new_c in string.ascii_lowercase:
					if new_c == expand[idx]:
						continue
					else:
						new_word = expand[:idx] + str(new_c) + expand[idx+1:]
						if new_word in word_list_lookup and new_word not in explored:
							explored[new_word] = explored[expand] + 1
							if new_word == endWord:
								return explored[new_word]
							frontier.append(new_word)

		return 0
#
class Solution:
    def ladderLength(self, beginWord, endWord, wordList):
        visited = set()
        wordSet = set(wordList)
        
        queue = [(beginWord, 1)]
        
        while len(queue) > 0:
            word, count = queue.pop(0)
            if word == endWord:
                return count
            if word in visited:
                continue
                
            for i in range(len(word)):
                for j in range(0, 26): # try all possible one character permutations
                    char = ord('a') + j
                    changed_word = word[0:i] + chr(char) + word[i + 1:]
                    if changed_word in wordSet: # if permuted word is in word list then add children
                        queue.append((changed_word, count + 1))
            visited.add(word) # mark word as visited
        
        return 0 # if queue is exhausted and code reachers here then its impossible to reach endWord
     


#
#
#
#
