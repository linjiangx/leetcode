#DP,DFS
class Solution:
    def longestIncreasingPath(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: int
        """
        maxLength = 0
        dp = {}
                
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                maxLength = max(maxLength, self.helper(matrix, i, j, None, dp))
        
        return maxLength
                
    
    def helper(self, matrix, row, col, prevNum, dp):
        if row < 0 or col < 0 or row >= len(matrix) or col >= len(matrix[0]):
            return 0
        if prevNum != None and matrix[row][col] <= prevNum:
            return 0
        if (row,col) in dp:
            return dp[(row,col)]

        dirs = [(row+1,col), (row-1,col), (row,col+1), (row, col-1)]
        res = [self.helper(matrix, i[0], i[1], matrix[row][col], dp) for i in dirs]  
        
        dp[(row,col)] = max(res) + 1
        
        return dp[(row,col)]
#
#
#
#
#
#
