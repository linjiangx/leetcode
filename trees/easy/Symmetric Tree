#在队列中处理
from collections import deque

class Solution:
    def isSymmetric(self, root):
        if not root: return True
        if not root.left and not root.right: 
            return True
        if not root.left or not root.right:
            return False
        queue = deque([root.left,root.right])
        while queue:
            node1 = queue.popleft()
            node2 = queue.popleft()
            if not node1 and not node2:
                continue
            if not node1 or not node2:
                return False
            if node1.val != node2.val:
                return False
            queue.append(node1.left)
            queue.append(node2.right)
            queue.append(node1.right)
            queue.append(node2.left)
        return True
#
#直接在tree中处理，这样没有额外空间
class Solution:
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if not root:
            return True
        return self._mirrorTree(root.left,root.right)
    def _mirrorTree(self,left,right):
        if not (left or right):
            return True
        elif (not left and right) or (not right and left):
            return False
        else:
            return (left.val==right.val) and self._mirrorTree(left.left,right.right) and self._mirrorTree(left.right,right.left)
