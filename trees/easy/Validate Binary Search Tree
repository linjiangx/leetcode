#先转化为list，再判断list是递增序列
class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        res = self.inorderList(root)
        for i, n in enumerate(sorted(res)):
            if res[i] != n or (i < len(res) - 1 and res[i] == res[i + 1]): 
                return False
        return True
    
    def inorderList(self, root):
        if not root:
            return []
        return self.inorderList(root.left) + [root.val] + self.inorderList(root.right)
#
#直接比较
class Solution:
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        
        lower, upper = float('-inf'), float('inf')
        return self.isValidBST_helper(root, lower, upper)
    
    def isValidBST_helper(self, root, lower, upper):
        
        if root is None:
            return True
        
        value = root.val
        return (value > lower
                and value < upper
                and self.isValidBST_helper(root.left, lower, value)
                and self.isValidBST_helper(root.right, value, upper))
