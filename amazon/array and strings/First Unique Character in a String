#1. python, dic
class Solution:
    def firstUniqChar(self, s: str) -> int:
        dic = {}
        for i in range(len(s)):
            if s[i] not in dic:
                dic[s[i]] = [i]
            else:
                dic[s[i]].append(i)
        non_repeating_list = []
        for value in dic.values():
            if len(value) == 1:
                non_repeating_list.extend(value)
        return min(non_repeating_list) if non_repeating_list else -1
        
#2. python, left search index == right search index
class Solution:
    def firstUniqChar(self, s):
        alphabet = "abcdefghijklmnopqrstuvwxyz"  
        res = len(s)
        for x in alphabet:
            index = s.find(x)
            if index == -1:
                continue
            if index == s.rfind(x):
                res = min(res, index) 
        return -1 if res == len(s) else res
        
#3. python, alphabet list
class Solution:
    def firstUniqChar(self, s: str) -> int:
        count = [0] * 26
        for ch in s:
            count[ord(ch)-ord('a')] += 1      
        for ix, ch in enumerate(s):
            if count[ord(ch)-ord('a')] == 1:
                return ix
        return -1
        
#4. java, hashmap, similar to 1th solution
class Solution {
    public int firstUniqChar(String s) {
        Map<Character, ArrayList> map = new HashMap<Character, ArrayList>();
        for(int i = 0; i < s.length(); i++){
            if(!map.containsKey(s.charAt(i))){
                ArrayList<Integer> arraylist = new ArrayList<Integer>();
                arraylist.add(i);
                map.put(s.charAt(i), arraylist);
            }
            else{
                map.get(s.charAt(i)).add(i);
            }
        }
        ArrayList<Integer> arraylist = new ArrayList<Integer>();
        for(ArrayList value : map.values()){
            if(value.size() == 1){
                arraylist.addAll(value);
            }
        }
        if(arraylist.size() == 0){
            return -1;
        }
        else{
            return Collections.min(arraylist);
        }

    }
}

#5. java, left search index == right search index, similar to 2th solution
class Solution {
    public int firstUniqChar(String s) {
        int result = Integer.MAX_VALUE;
        for (char c = 'a'; c <= 'z'; c++) {
            int id = s.indexOf(c);
            if (id != -1 && id == s.lastIndexOf(c))
                result = Math.min(result, id);
        }
        return (result == Integer.MAX_VALUE) ? -1 : result;
    }
}

#6. java, alphabet list, similar to 3th solution
class Solution {
    public int firstUniqChar(String s) {
        char[] char_array = s.toCharArray();
        int[] alphabet = new int[128];
        for(char c: char_array){
            alphabet[c]++;
        }
        for(int i=0;i<char_array.length;i++){
            if(alphabet[char_array[i]] == 1)
                return i;
        }
        return -1;
    }
}
