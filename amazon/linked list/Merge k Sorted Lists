#python, heapq
from heapq import heappush, heappop
class Solution:
    def mergeKLists(self, lists):
        head=current=ListNode(0)
        q=[]
        for l in lists:
            if l:
                heappush(q,(l.val,l))
        while q:
            value,current.next=heappop(q)
            current=current.next
            after=current.next
            if after:
                heappush(q,(after.val,after))
        return head.next
        
#java, priorityqueue
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 0) return null;
        PriorityQueue<ListNode> queue = new PriorityQueue<ListNode>(lists.length, new Comparator<ListNode>(){
            public int compare(ListNode o1, ListNode o2){
                if(o1.val < o2.val) return -1;
                else if (o1.val > o2.val) return 1;
                else return 0;
            }
        });
        ListNode dummy = new ListNode(0);
        ListNode cur = dummy;
        for(ListNode node: lists){
            if(node != null) queue.add(node);
        }
        while(!queue.isEmpty()){
            cur.next = queue.poll();
            cur = cur.next;
            if(cur.next != null) queue.add(cur.next);
        }
        return dummy.next;  
    }
}
