/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public int minMeetingRooms(Interval[] intervals) {
        List<Integer> starts = new ArrayList<Integer>();
        List<Integer> ends = new ArrayList<Integer>();
        for(int i = 0; i < intervals.length; i++){
            starts.add(intervals[i].start);
            ends.add(intervals[i].end);
        }
        Collections.sort(starts);
        Collections.sort(ends);
        int start_index = 0, end_index = 0;
        int totalroom = 0, available = 0;
        while(start_index < intervals.length){
            if(starts.get(start_index) < ends.get(end_index)){
                if(available == 0) totalroom++;
                else available--;
                start_index++;
            }
            else{
                available++;
                end_index++;
            }
        }
        return totalroom;
    }
}
