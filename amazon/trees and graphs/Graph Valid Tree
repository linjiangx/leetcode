# java, straightforward
class Solution {
    public boolean validTree(int n, int[][] edges) {
        List<List<Integer>> edg = new ArrayList<>();
        for(int i = 0; i < n; i++) edg.add(new ArrayList<Integer>());
        for(int i = 0; i < edges.length; i++){
            edg.get(edges[i][0]).add(edges[i][1]);
            edg.get(edges[i][1]).add(edges[i][0]);
        }
        Queue<Integer> queue = new LinkedList<>();
        queue.add(0);
        Set<Integer> set = new HashSet<>();
        while(!queue.isEmpty()){
            int cur = queue.poll();
            if(set.contains(cur)) return false;
            set.add(cur);
            for(int i = 0; i < edg.get(cur).size(); i++){
                if(!set.contains(edg.get(cur).get(i))) queue.add(edg.get(cur).get(i));
            }
        }
        if(set.size() == n) return true;
        else return false;
    }
}

#java, union-find
public class Solution {
    public boolean validTree(int n, int[][] edges) {
        // initialize n isolated islands
        int[] nums = new int[n];
        Arrays.fill(nums, -1);
        
        // perform union find
        for (int i = 0; i < edges.length; i++) {
            int x = find(nums, edges[i][0]);
            int y = find(nums, edges[i][1]);
            
            // if two vertices happen to be in the same set
            // then there's a cycle
            if (x == y) return false;
            
            // union
            nums[x] = y;
        }
        
        return edges.length == n - 1;
    }
    
    int find(int nums[], int i) {
        if (nums[i] == -1) return i;
        return find(nums, nums[i]);
    }
}

#java, contian math
public boolean validTree(int n, int[][] edges) {
	if (edges.length != n - 1) return false;
	Set<Integer> set = new HashSet<Integer>();
	for (int i = 0; i < edges.length; ++i) {
		if (!set.contains(edges[i][0])) set.add(edges[i][0]);
		if (!set.contains(edges[i][1])) set.add(edges[i][1]);
		if (i > set.size() - 2) return false; // can't replace i > set.size() - 2 with i != set.size() - 2
	}
	return true;
}
