# java, dfs
class Solution {
    public int numIslands(char[][] grid) {
        int res = 0;
        int row = grid.length;
        if(row == 0) return 0;
        int col = grid[0].length;
        for(int i = 0; i < row; i++)
            for(int j = 0; j < col; j++){
                if(grid[i][j] == '1'){
                    res++;
                    dfs(grid, i, j);
                }
            }
        return res;
    }
    
    public void dfs(char[][] grid, int i, int j){
        grid[i][j] = '0';
        int row = grid.length;
        int col = grid[0].length;
        int[][] direction = {{-1,0},{1,0},{0,-1},{0,1}};
        for(int k = 0; k < 4; k++){
            int new_i = i + direction[k][0];
            int new_j = j + direction[k][1];
        if(new_i >= 0 && new_i < row && new_j >= 0 && new_j < col && grid[new_i][new_j] == '1') dfs(grid, new_i, new_j);
        }
    }
}
