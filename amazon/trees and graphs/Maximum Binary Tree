#java
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        if(nums.length == 0) return null;
        int id = 0, num = nums[0];
        for(int i = 0; i < nums.length; i++){
            if (nums[i] > num){
                id = i;
                num = nums[i];
            }
        }
        TreeNode root = new TreeNode(num);
        root.left = constructMaximumBinaryTree(Arrays.copyOfRange(nums, 0, id));
        root.right = constructMaximumBinaryTree(Arrays.copyOfRange(nums, id + 1, nums.length));
        return root;
    }
}

#java, no array copy
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        TreeNode root = null;
        
        int n = nums.length;
        
        if (n == 0) {
            return root;
        }
        if (n == 1) {
            root = new TreeNode(nums[0]);
            root.left = root.right = null;
            return root;
        }
        
        root = createSubTrees(nums, 0 , n-1);
        return root;
    }
    
    private TreeNode createSubTrees(int[] nums, int start, int end) {
        TreeNode root = null, left = null, right = null;
        
        if (start > end) {
            return root;
        }
        
        if (start == end) {
            root = new TreeNode(nums[start]);
            root.left = root.right = null;
            return root;    
        }
        
        int idx = start;
        int max = nums[start];
        for (int i = start + 1; i <= end; ++i) {
            if (nums[i] > max) {
                idx = i;
                max = nums[i];
            }
        }
        
        root = new TreeNode(max);
        root.left = root.right = null;
        
        if (idx > start) {
            left = createSubTrees(nums, start, idx-1);
            root.left = left;
        }
        if (end > idx) {
            right = createSubTrees(nums, idx+1, end);
            root.right = right;
        }
        return root;
    }
}
