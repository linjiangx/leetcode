#
class Solution(object):
    def findStrobogrammatic(self, n):
        nums = n % 2 * list('018') or ['']
        while n > 1:
            n -= 2
            nums = [a + num + b for a, b in '00 11 88 69 96'.split()[n < 2:] for num in nums]
        return nums
#
class Solution(object):
    #
    def findStrobogrammatic(self, n):
        evenMidCandidate = ["11","69","88","96", "00"]
        oddMidCandidate  = ["0", "1", "8"]
        
        if n == 1:
            return oddMidCandidate
        if n == 2:
            return evenMidCandidate[:-1]
        if n % 2:
            pre, midCandidate = self.findStrobogrammatic(n-1), oddMidCandidate
        else: 
            pre, midCandidate = self.findStrobogrammatic(n-2), evenMidCandidate
            
        premid = (n-1)/2
        
        return [p[:premid] + c + p[premid:] for c in midCandidate for p in pre]
