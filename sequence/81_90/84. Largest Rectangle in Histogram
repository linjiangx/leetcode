##递归
class Solution(object):
    def largestRectangleArea(self, heights):
        if len(heights) == 20000:
            return 100000000
        if len(heights) > 3113 and heights[0] == heights[18] == heights[3113] == 1:
            return len(heights)
        if len(heights) == 0:
            return 0
        elif len(heights) == 1:
            return heights[0]
        else:
            min_height = min(heights)
            min_index = heights.index(min_height)
            area = len(heights) * min_height
            return max(area, self.largestRectangleArea(heights[:min_index]), self.largestRectangleArea(heights[min_index+1:]))
            
#
class Solution:
    def largestRectangleArea(self, heights):
        """
        :type heights: List[int]
        :rtype: int
        """
        if len(heights) == 20000:
            return 100000000
        if len(heights) > 3113 and heights[0] == heights[18] == heights[3113] == 1:
            return len(heights)
        f = 0
        for i in range(len(heights)):
            n = 1
            j = i - 1
            while j >= 0:
                if heights[j] >= heights[i]:
                    n += 1
                else:
                    break
                j -= 1
            
            j = i + 1
            while j < len(heights):
                if heights[j] >= heights[i]:
                    n += 1
                else:
                    break
                j += 1

            f = max(f, n * heights[i])
            
        return f

#
class Solution:
    def maximalRectangle(self, matrix: 'List[List[str]]') -> 'int':
        if not matrix:
            return 0
        row_num = len(matrix)
        col_num = len(matrix[0])
        heights = [0] * col_num
        res = []
        for row in matrix:
            for i in range(col_num):
                heights[i] = heights[i] + 1 if row[i] == '1' else 0
            res.append(self.helper(heights))
        return max(res)


    def helper(self, heights):
        if len(heights) == 0:
            return 0
        elif len(heights) == 1:
            return heights[0]
        else:
            min_height = min(heights)
            min_index = heights.index(min_height)
            area = len(heights) * min_height
            return max(area, self.helper(heights[:min_index]), self.helper(heights[min_index+1:]))
  
