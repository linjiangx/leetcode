#backtracking
class Solution:
    def deleteDuplicates(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        # Edge/Base case
        if not head or not head.next:
            return head
        # case (1)
        if head.val == head.next.val:
            while head.next and head.val == head.next.val:
                head = head.next
            return self.deleteDuplicates(head.next)    
        # case (2)
        else:
            head.next = self.deleteDuplicates(head.next)
            return head

#
class Solution:
    def deleteDuplicates(self, head: 'ListNode') -> 'ListNode':
        dummy = pre = ListNode(0)
        dummy.next = head
        while head and head.next:
            if head.val == head.next.val:
                while head and head.next and head.val == head.next.val:
                    head = head.next
                head = head.next
                pre.next = head
            else:
                pre = pre.next
                head = head.next
        return dummy.next
