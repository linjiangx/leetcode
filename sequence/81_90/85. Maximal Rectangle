#位运算
class Solution:
    def maximalRectangle(self, matrix):
        if not matrix: return 0
        nums, area = [int(''.join(row), base=2) for row in matrix], 0
        for i in range(len(nums)):
            num = -1
            for j in range(i, len(nums)):
                num &= nums[j]
                if not num: break
                n, l = num, 0
                while n:
                    l += 1
                    n &= n << 1
                area = max(area, l * (j - i + 1))
        return area
#
class Solution:
    def maximalRectangle(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        if not matrix or not matrix[0]:
            return 0
        n = len(matrix[0])
        height = [0] * (n + 1)
        ans = 0
        for row in matrix:
            for i in range(n):
                height[i] = height[i] + 1 if row[i] == '1' else 0
            stack = [-1]
            for i in range(n + 1):
                while height[i] < height[stack[-1]]:
                    h = height[stack.pop()]
                    w = i - 1 - stack[-1]
                    ans = max(ans, h * w)
                stack.append(i)
        return ans
        
#
class Solution:
    def maximalRectangle(self, matrix: 'List[List[str]]') -> 'int':
        if not matrix:
            return 0
        row_num = len(matrix)
        col_num = len(matrix[0])
        heights = [0] * col_num
        res = []
        for row in matrix:
            for i in range(col_num):
                heights[i] = heights[i] + 1 if row[i] == '1' else 0
            res.append(self.helper(heights))
        return max(res)


    def helper(self, heights):
        if len(heights) == 0:
            return 0
        elif len(heights) == 1:
            return heights[0]
        else:
            min_height = min(heights)
            min_index = heights.index(min_height)
            area = len(heights) * min_height
            return max(area, self.helper(heights[:min_index]), self.helper(heights[min_index+1:]))
  
