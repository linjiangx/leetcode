#
from collections import Counter
class Solution:
    def subsetsWithDup(self, nums: 'List[int]') -> 'List[List[int]]':
        c = Counter(nums)
        ret = [[]]
        for n in c:
            for i in range(len(ret)):
                for v in range(1, c[n]+1):
                    ret.append(ret[i] + [n]*v)
        return ret
#

#backtracking

def backtrack(nums, res, temp, start):
    res.append(temp)
    for i in range(start, len(nums)):
		# Skip duplicate numbers
        if not (i > start and nums[i-1] == nums[i]):
            backtrack(nums, res, temp + [nums[i]], i+1)

class Solution(object):
    def subsetsWithDup(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        nums.sort()
        res = []
        backtrack(nums, res, [], 0)
        return res
