#
#
class Node(object):
    def __init__(self, key, val=1):
        self.key = key
        self.val = val
        self.prev = None
        self.next = None
        
    def backward(self):
        if self.prev.key is not None:
            p_, p__, n_ = self.prev, self.prev.prev, self.next
            self.prev, self.next, p_.prev, p_.next, p__.next, n_.prev = p__, p_, self, n_, self, p_
            
    def forward(self):
        if self.next.key is not None:
            p_, n_, n__ = self.prev, self.next, self.next.next
            self.prev, self.next, n_.prev, n_.next, p_.next, n__.prev = n_, n__, p_, self, n_, self


class AllOne(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.keys = dict()
        self.head = Node(key=None, val=None)
        self.tail = Node(key=None, val=None)
        self.head.next, self.tail.prev = self.tail, self.head

    def inc(self, key):
        """
        Inserts a new key <Key> with value 1. Or increments an existing key by 1.
        :type key: str
        :rtype: void
        """
        if key in self.keys:
            node = self.keys[key]
            node.val += 1
            while node.next.key:
                if node.val > node.next.val:
                    node.forward()
                else:
                    break
        else:
            node = Node(key)
            self.keys[key] = node
            n_ = self.head.next
            self.head.next, n_.prev = node, node
            node.prev, node.next = self.head, n_

    def dec(self, key):
        """
        Decrements an existing key by 1. If Key's value is 1, remove it from the data structure.
        :type key: str
        :rtype: void
        """
        if key in self.keys:
            node = self.keys[key]
            if node.val == 1:
                node.prev.next = node.next
                node.next.prev = node.prev
                node.prev, node.next = None, None
                del self.keys[key]
            else:
                node.val -= 1
                while node.prev.key:
                    if node.val < node.prev.val:
                        node.backward()
                    else:
                        break
        
    def getMaxKey(self):
        """
        Returns one of the keys with maximal value.
        :rtype: str
        """
        return self.tail.prev.key if self.tail.prev.key else ''

    def getMinKey(self):
        """
        Returns one of the keys with Minimal value.
        :rtype: str
        """
        return self.head.next.key if self.head.next.key else ''
