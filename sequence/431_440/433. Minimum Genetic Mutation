#
#
class Solution(object):
    def minMutation(self, start, end, bank):
        """
        :type start: str
        :type end: str
        :type bank: List[str]
        :rtype: int
        """

        # function to generate all possible combinations of mutation for a given mutation
        def all_possible_values(word, bank):
            all_values = []
            for i in range(len(word)):
                for char in {"A", "C", "G", "T"}:
                    mutate = word[:i] + char + word[i + 1:]
                    # check if the new mutation is valid ie in the bank
                    if mutate in bank:
                        all_values.append(mutate)
                        bank.remove(mutate)
            return all_values

        # set for fast lookup
        bank = set(bank)
        queue = collections.deque([(start, 1)])

        while queue:
            word, depth = queue.popleft()
            for word in all_possible_values(word, bank):
                # return if new mutation is same as end
                if word == end:
                    return depth
                else:
                    queue.append((word, depth + 1))

        return -1
