#
#
class Solution(object):
    def cheapestJump(self, A, B):
        """
        :type A: List[int]
        :type B: int
        :rtype: List[int]
        """
        if A[-1] == -1:
            return []
        dp = A[:]
        hq = [(A[0], [0])]
        index = [0] * len(A)
        for i in range(1, len(A)):
            while hq and hq[0][1][-1] < i - B:
                heapq.heappop(hq)
            if not hq:
                return []
            if A[i] != -1:
                lst = hq[0][1]
                dp[i] += hq[0][0]
                index[i] = hq[0][1][-1]
                if A[i] == 0:
                    hq = []
                heapq.heappush(hq, (dp[i], lst + [i]))
        res = [len(A) - 1]
        while res[-1]:
            res.append(index[res[-1]])
        return [x + 1 for x in res[::-1]]
