#
class Solution(object):
    def ladderLength(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: int
        """
        if wordList == [] or endWord not in wordList:
            return 0
        
        word_dict = [set() for _ in range(len(beginWord))]
        for i in range(len(beginWord)):
            for word in wordList:
                word_dict[i].add(word[i])
        
        wordSet = set(wordList)
        front = set([beginWord])
        end = set([endWord])
        wordSet.remove(endWord)
        
        level = 2
        while front:
            newset = set()
            for word in front:
                for i in range(len(word)):
                    for char in word_dict[i]:
                        new_word = word[:i] + char + word[i + 1:]
                        if new_word in end:
                            return level
                        elif new_word in wordSet:
                            newset.add(new_word)
                            wordSet.remove(new_word)
            front = newset
            level += 1
            if len(front) > len(end):
                front, end = end, front
                
        return 0
#
class Solution:
    def ladderLength(self, beginWord, endWord, wordList):
        visited = set()
        wordSet = set(wordList)
        
        queue = [(beginWord, 1)]
        
        while len(queue) > 0:
            word, count = queue.pop(0)
            if word == endWord:
                return count
            if word in visited:
                continue
                
            for i in range(len(word)):
                for j in range(0, 26): # try all possible one character permutations
                    char = ord('a') + j
                    changed_word = word[0:i] + chr(char) + word[i + 1:]
                    if changed_word in wordSet: # if permuted word is in word list then add children
                        queue.append((changed_word, count + 1))
            visited.add(word) # mark word as visited
        
        return 0 # if queue is exhausted and code reachers here then its impossible to reach endWord
     
