#
#step控制迭代方向，开始正向向L中填值，一轮之后，反向向L中填值，循环
class Solution:
    def convert(self, s, numRows):
        """
        :type s: str
        :type numRows: int
        :rtype: str
        """
        if numRows == 1 or len(s) <= numRows:
            return s
        res = [''] * numRows
        index, step = 0, 1
        for alm in s:
            res[index] += alm
            if index == 0:
                step = 1
            elif index == numRows - 1:
                step = -1
            index += step
        return ''.join(res)
            
       
#
#
class Solution:
    def convert(self, s, numRows):
        """
        :type s: str
        :type numRows: int
        :rtype: str
        """
        if numRows == 1:
            return s
        circle_length = 2 * numRows - 2
        res = ''
        for i in range(numRows):
            for j in range(len(s)):
                if j % circle_length == i or j % circle_length == circle_length - i:
                    res += s[j]
        return res
            
