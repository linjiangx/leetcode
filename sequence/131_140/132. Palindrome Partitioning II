#
class Solution:
    def minCut(self, s: 'str') -> 'int':
        # acceleration
        if s == s[::-1]:
            return 0
        n = len(s)
        if any(s[:i] == s[:i][::-1] and s[i:] == s[i:][::-1] for i in range(1, n)):
            return 1

        cut = list(range(-1, n))   # cut numbers in worst case (no palindrome)
        for i in range(n):
            r1, r2 = 0, 0
            # use i as origin, and gradually enlarge radius if a palindrome exists
            # odd palindrome
            while r1 <= i < n-r1 and s[i-r1] == s[i+r1]:
                cut[i+r1+1], r1 = min(cut[i+r1+1], cut[i-r1]+1), r1 + 1
            # even palindrome
            while r2 <= i < n-r2-1 and s[i-r2] == s[i+r2+1]:
                cut[i+r2+2], r2 = min(cut[i+r2+2], cut[i-r2]+1), r2 + 1
        return cut[-1]
#
class Solution(object):
    def minCut(self, s):
        """
        :type s: str
        :rtype: int
        """
        dp = [0]*len(s)
        for i in range(len(s)-2,-1,-1):
            dp[i] = 0 if s[i:]==s[i:][::-1] else 1 + min(dp[j] for j in range(i+1,len(s)) if s[i:j] == s[i:j][::-1])
        return dp[0]
