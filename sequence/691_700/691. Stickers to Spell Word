#
#
class Solution:
    def minStickers(self, stickers: 'List[str]', target: 'str') -> 'int':
        stickers, self.map = [collections.Counter(s) for s in stickers if set(s) & set(target)], {}
        def dfs(target):
            if not target: return 0
            if target in self.map: return self.map[target]
            cnt, res = collections.Counter(target), float('inf')
            for c in stickers: # traverse the stickers to get new target
                if c[target[0]] == 0: continue # we can make sure the 1st letter will be removed to reduce the time complexity
                nxt = dfs(''.join([s * t for (s, t) in (cnt - c).items()]))
                if nxt != -1: res = min(res, 1 + nxt)
            self.map[target] = -1 if res == float('inf') else res
            return self.map[target]
        return dfs(target)
