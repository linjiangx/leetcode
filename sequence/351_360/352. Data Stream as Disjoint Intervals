#
#
# Definition for an interval.
# class Interval(object):
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e
'''
My solution gets AC, but I am not that confident given everyone is posting O(log(N)) solutions.

Keep in mind that getInterval needs to return m = #intervals elements, so the runtime is Omega(m), even if you directly maintain the intervals and return it. It might not be the case if the return value is passed by address, correct me if this is the case.

The adding runtime is obviously optimal. But there is a not too bad overhead for getInterval, and the memory might be bad. We are using O(n) for recording all seen elements.

The idea is to maintain a dictionary from interval left to interval right and another from interval right to interval left.

For each new value,

if the value is added before, just ignore
if the value is isolated, insert value => value to both dictionaries
if value - 1 is unseen but value + 1 is seen, merge with [value + 1, left_to_right[value + 1]]
if value - 1 is seen but value + 1 is unseen, merge with [right_to_left[value - 1], value - 1]
otherwise, merge with [right_to_left[value - 1], value - 1] and [value + 1, left_to_right[value + 1]]
For each merge, delete the outdated keys from the dictionary.

Example: [1, 3, 7, 2, 6]

Initially, left_to_right = {}, right_to_left = {}
Add 1, left_to_right = {1:1}, right_to_left = {1:1}
Add 3, left_to_right = {1:1, 3:3}, right_to_left = {1:1, 3:3}
Add 7, left_to_right = {1:1, 3:3, 7:7}, right_to_left = {1:1, 3:3, 7:7}
Add 2, left_to_right = {1:3, 7:7}, right_to_left = {3:1, 7:7}
Add 6, left_to_right = {1:3, 6:7}, right_to_left = {3:1, 7:6}
For getInterval, simply sort the left => right pairs inside left_to_right.
'''
class SummaryRanges(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.seen = set()
        self.left2right = dict()
        self.right2left = dict()

    def addNum(self, val):
        """
        :type val: int
        :rtype: void
        """
        if val in self.seen:
            return
        self.seen.add(val)
        if val - 1 not in self.right2left and val + 1 not in self.left2right:
            self.left2right[val] = val
            self.right2left[val] = val
        elif val - 1 not in self.right2left and val + 1 in self.left2right:
            self.left2right[val] = self.left2right[val + 1]
            self.right2left[self.left2right[val]] = val
            del self.left2right[val + 1]
        elif val - 1 in self.right2left and val + 1 not in self.left2right:
            self.right2left[val] = self.right2left[val - 1]
            self.left2right[self.right2left[val]] = val
            del self.right2left[val - 1]
        else:
            left = self.right2left[val - 1]
            right = self.left2right[val + 1]
            del self.left2right[val + 1]
            del self.right2left[val - 1]
            self.left2right[left] = right
            self.right2left[right] = left

    def getIntervals(self):
        """
        :rtype: List[Interval]
        """
        rtn = [Interval(k, v) for k, v in self.left2right.items()]
        rtn.sort(key=lambda i: i.start)
        return rtn


# Your SummaryRanges object will be instantiated and called as such:
# obj = SummaryRanges()
# obj.addNum(val)
# param_2 = obj.getIntervals()
