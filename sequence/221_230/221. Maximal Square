
##
class Solution:
    def maximalSquare(self, matrix):
        
        res = 0
        if not matrix: 
            return res
        
        n_rows, n_cols = len(matrix), len(matrix[0])
        dp = [ [0] * n_cols for _ in range(n_rows) ]
        
        ONE = "1"
        
        for i in range(n_rows):
            for j in range(n_cols):
                
                # We only care if the elem in the matrix is a ONE.
                if matrix[i][j] == ONE:
                    
                    # If row == 0 or col == 0, it's always a count of 1.
                    if i == 0 or j == 0:
                        dp[i][j] = 1
                        
                    # Elif top, left, and topleft elems are more than 0, 
                    # the elem will be 1 + min(top_elem, left_elem, topleft_elem)
                    elif dp[i-1][j] > 0 and dp[i][j-1] > 0 and dp[i-1][j-1] > 0:
                        dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])
                    
                    # Else, elem is just an isolated square (i.e., 1)
                    else:
                        dp[i][j] = 1
                    
                    # Keep track of the max length in the "res" variable
                    if dp[i][j] > res:
                        res = dp[i][j]
                    
        return res*res  # Return the area
