#不使用模块
class Solution:
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        l = self.binarySearch(nums, target)
        if l == -1:
            return [-1, -1]
        else:
            h = self.binarySearch(nums, target, False)
            return [l, h]
        
    def binarySearch(self, nums, target, left_most=True):
        low, high = 0, len(nums)-1
        while low <= high:
            mid = (low + high) // 2
            if left_most:
                if (mid > 0 and nums[mid] == target and nums[mid - 1] != target) or (mid == 0 and nums[mid] == target):
                        return mid
                elif target <= nums[mid]:
                    high = mid - 1
                else:
                    low = mid + 1
            else:
                if (mid < len(nums)-1 and nums[mid] == target and nums[mid + 1] != target) or (mid == len(nums) -1 and nums[mid] == target):
                        return mid
                elif target >= nums[mid]:
                    low = mid + 1
                else:
                    high = mid - 1
        return -1
#使用模块
class Solution(object):
    import bisect
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        first = bisect.bisect_left(nums, target)
        last = bisect.bisect_right(nums, target) - 1
        if first >= len(nums) or last >=len(nums) or nums[first] != target or nums[last] != target:
            return [-1,-1]
        return [first, last]
