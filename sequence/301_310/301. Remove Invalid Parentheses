#
#
class Solution:
    def removeInvalidParentheses(self, s):
        # Calculate the minimum left and right parantheses to remove
        def findMinRemove(s):
            left_removed, right_removed = 0, 0
            for c in s:
                if c == '(':
                    left_removed += 1
                elif c == ')':
                    if left_removed==0:
                        right_removed += 1
                    else:
                        left_removed -= 1
            return (left_removed, right_removed)

        # Check whether s is valid or not.
        def isValid(s):
            sums = 0
            for c in s:
                if c == '(':
                    sums += 1
                elif c == ')':
                    sums -= 1
                if sums < 0:
                    return False
            return sums == 0  
        
        def dfs(s, start, left_removed, right_removed):
            # 左右括号都为0，检查答案是否合法
            if left_removed == 0 and right_removed == 0:
                if isValid(s):
                    res.append(s)
                return

            for i in range(start, len(s)):
                if i != start and s[i] == s[i - 1]:  # Skip duplicated
                    continue
                curr = s[:i]+s[i+1:]
                #先移除右括号，保证不出现)(的情况
                if right_removed > 0 and s[i] == ')':
                    # 注意由于我们删除了s[i],因此index从i开始,删除右括号，右括号减一
                    dfs(curr, i, left_removed, right_removed - 1)
                elif right_removed == 0 and left_removed > 0 and s[i] == '(':
                    # 注意由于我们删除了s[i],因此index从i开始,删除左括号，左括号减一
                    dfs(curr,i, left_removed - 1, right_removed)                                      

        res = []
        (left_removed, right_removed) = findMinRemove(s)
        dfs(s, 0, left_removed, right_removed)

        return res
