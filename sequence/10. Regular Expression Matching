#
#
class Solution:
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        slen, plen = len(s), len(p)
        dp = [[False] * (plen + 1) for _ in range(slen + 1)]
        dp[0][0] = True
        for i in range(0, slen + 1):
            for j in range(1, plen + 1):
                if p[j - 1] == '*':    #这里的s[i - 1]和p[j - 1]实际上是当前位置，因为考虑了从无开始，首发坐标都变成了1，而不是0了
                    dp[i][j] = dp[i][j - 2] or (i > 0 and (s[i - 1] == p[j - 2] or p[j -2] == '.') and dp[i - 1][j])
                else:
                    dp[i][j] = i > 0 and dp[i - 1][j - 1] and (s[i - 1] == p[j - 1] or p[j -1] == '.')
        return dp[slen][plen]
        
