#
#
'''
Corner Case:
sum(pick values) < desired sum: The first player never wins.
sum(pick values) == desired sum: Whoever takes the last wins. (Irrelevant to who pick which number first)
max choosable number > desired sum: The first player always wins by picking the max number.
Code Supplemental Explanation:
Record: Used to rememeber win\loss for current state. (what numbers have been picked, True: Win, False: Lose)
Bitmap: Record which number has been picked. Also used as an index to access the win loss record. (if in hash table)
Win if there is a way of picking a number 'n' such that no matter how opponent picks next, the opponent lose.
Lose if there is no way of picking a number 'n' that satisfies the above situation.
Win\Loss is for the first player with the game status (bitmap passed in).
'''

class Solution(object):
    def canIWin(self, maxChoosableInteger, desiredTotal):
        """
        :type maxChoosableInteger: int
        :type desiredTotal: int
        :rtype: bool
        """
        
        max_sum = maxChoosableInteger*(maxChoosableInteger+1)//2
        
        if max_sum < desiredTotal:
            return False
        elif max_sum == desiredTotal:
            return (maxChoosableInteger%2 == 1)
        
        if maxChoosableInteger >= desiredTotal:
            return True
        
        bit_mask = 1 << maxChoosableInteger # bit 0: unused, bit 1: used
        self.record = {}
        
        return self.checkWin(maxChoosableInteger, bit_mask, desiredTotal)
    
    def checkWin(self, max_num, bit_mask, remain_sum):
        
        if bit_mask in self.record:
            return self.record[bit_mask]
        
        for i in range(max_num):
            
            if (1&(bit_mask >> i)) != 0:
                # skip already-picked number
                continue
            
            n = i+1 # n: picked number
            if (n >= remain_sum) or (self.checkWin(max_num, bit_mask | (1<< i), remain_sum-n) is False):
                self.record[bit_mask] = True
                return True
        
        self.record[bit_mask] = False
        return False
