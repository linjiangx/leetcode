#
class Solution:
    def minimumTotal(self, triangle: 'List[List[int]]') -> 'int':

        result = triangle[-1]
        for i in reversed(range(len(triangle) - 1)):
            result = [node + min(left, right) for node, left, right in zip(triangle[i], result[:-1], result[1:])]
        return result[0]
#dp
def minimumTotal(self, triangle):
    """
    :type triangle: List[List[int]]
    :rtype: int
    """
    m = len(triangle)
    n = len(triangle[-1])
    # dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]
    dp = [i for i in triangle[-1]]
    
    for i in range(m - 2, -1, -1):
        for j in range(len(triangle[i])):                
            dp[j] = min(dp[j], dp[j + 1]) + triangle[i][j]
        
    return dp[0]
