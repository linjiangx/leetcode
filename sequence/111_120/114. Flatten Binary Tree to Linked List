#iter
class Solution:
    def flatten(self, root: 'TreeNode') -> 'None':

        last=TreeNode(-1)
        qstack=[root]
        while qstack:
            node=qstack.pop()
            last.right=node
            last.left=None
            if node and node.right:
                qstack.append(node.right)
            if node and node.left:
                qstack.append(node.left)
            last=node
#recur
class Solution:
    pre = None
    def flatten(self, root):
        """
        :type root: TreeNode
        :rtype: void Do not return anything, modify root in-place instead.
        """
        if root is None:
            return
        
        self.pre = root
        self.flatten(root.left)
        temp = root.right
        root.right, root.left = root.left, None
        self.pre.right = temp
        self.flatten(root.right)
