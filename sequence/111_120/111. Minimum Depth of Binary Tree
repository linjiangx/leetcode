#
class Solution:
    def minDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0
        else:
            stack, min_depth = [(1, root),], float('inf')
        
        while stack:
            depth, root = stack.pop()
            children = [root.left, root.right]
            if not any(children):
                min_depth = min(depth, min_depth)
            for c in children:
                if c:
                    stack.append((depth + 1, c))
        
        return min_depth 
#recur
class Solution:
    def minDepth(self, root: 'TreeNode') -> 'int':
        if not root:
            return 0
        leftdep = self.minDepth(root.left)
        rightdep = self.minDepth(root.right)
        if not root.left:
            return 1 + rightdep
        if not root.right:
            return 1 + leftdep  
        return 1 + min(leftdep,rightdep)
