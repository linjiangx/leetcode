#python, dict
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        if len(s) <= 1:
            return len(s)
        dic = {}
        left = right = 0
        longest = 0
        for right in range(len(s)):
            if s[right] in dic and left <= dic[s[right]]:
                left = dic[s[right]] + 1
            elif right - left + 1 > longest:
                longest = right - left + 1
            dic[s[right]] = right
        return longest
        
#java, hashmap
class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length() <= 1) return s.length();
        Map<Character, Integer> map = new HashMap<Character, Integer>();
        int left = 0, right = 0, longest = 0;
        for(right = 0; right < s.length(); right++){
            if(map.containsKey(s.charAt(right)) && left <= map.get(s.charAt(right))){
                left = map.get(s.charAt(right))+ 1;
            }
            else if(right - left + 1 > longest){
                longest = right - left + 1;
            }
            map.put(s.charAt(right), right);
                        
        }
        return longest;
    }
}         
#
#
