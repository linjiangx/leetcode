#
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        if len(s)<=1:
            return len(s)
        ht = {}
        first = 0
        longest = 0
        for i in range(len(s)):
            if s[i] in ht and first <= ht[s[i]]:  #first <= ht[s[i]]，避免更新前面标记的时候向左边更新了
                first = ht[s[i]]+1
            elif i-first+1 > longest:
                longest = i-first+1
            ht[s[i]] = i
            
        return longest
#
class Solution:
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        if len(s) == 0:
            return 0
        firstIndex = secondIndex = 0
        maxlen = curlen = 1
        dic = {}
        dic[s[0]] = 0
        while secondIndex < len(s)-1:
            secondIndex += 1
            if s[secondIndex] not in dic:
                dic[s[secondIndex]] = secondIndex
                curlen += 1
                if curlen > maxlen:
                    maxlen = curlen
            else:
                firstIndex = dic[s[secondIndex]] + 1
                dic = {}
                secondIndex = firstIndex
                dic[s[secondIndex]] = secondIndex
                curlen = 1
        return maxlen
            
#
#
