#
class Solution:
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        len1, len2 = len(nums1), len(nums2)
        if len1 > len2:
            nums1, nums2, len1, len2 = nums2, nums1, len2, len1
        imin, imax, half_len = 0, len1 , (len1 + len2 + 1 ) // 2    #这里的总长度一半为何要取加1后平均：保证前半段的长度》=后半段
        while imin <= imax:
            i = (imin + imax) // 2
            j = half_len - i
            if i < len1 and nums2[j-1] > nums1[i]:
                imin = i + 1
            elif i > 0 and nums1[i-1] > nums2[j]:
                imax = i - 1
            else:
                if i == 0: max_of_left = nums2[j-1]
                elif j == 0: max_of_left = nums1[i-1]
                else: max_of_left = max(nums1[i-1], nums2[j-1])
                if (len1 + len2) % 2 == 1:
                    return max_of_left
                if i == len1: min_of_right = nums2[j]
                elif j ==len2: min_of_right = nums1[i]
                else: min_of_right = min(nums1[i], nums[j])
                return (max_of_left + min_of_right)/2
                
            
#
#
