#

#
class Solution(object):
    def treeToDoublyList(self, root):
        """
        :type root: Node
        :rtype: Node
        """
        if not root:
            return None
		
        head, tail = self.get_linked_list(root)
        head.left = tail
        tail.right = head
        return head
 
    def get_linked_list(self, node):

		
		# if node has no children, both the head and the tail is itself.
        if not node.left and not node.right:
            return (node, node)
        
		# if a node has a left child, linked list starting at left subtree is predecessor of node.
		# otherwise, the head of the linked list at node is itself.
        lhead, ltail = self.get_linked_list(node.left) if node.left else (node, None)
		
		# if a node has a right child, linked list starting at right subtree is successor of node.
		# otherwise, the tail of the linked list at node is itself.
        rhead, rtail = self.get_linked_list(node.right) if node.right else (None, node)
		
		# perform the correct connections
        node.left, node.right = ltail, rhead
        if ltail:
            ltail.right = node
        if rhead:
            rhead.left = node
			
		# return the head and tail of the linked list with node as the root.
        return (lhead, rtail)
