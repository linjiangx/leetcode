#
#
class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        if not obstacleGrid or not obstacleGrid[0]:
            return 0
        if obstacleGrid[0][0] == 1 or obstacleGrid[-1][-1] == 1:
            return 0
        
        n, m = len(obstacleGrid), len(obstacleGrid[0])
        dp = [[0] * m for _ in range(n)]
        dp[0][0] = 1
        
        for j in range(1, m):
            if obstacleGrid[0][j] == 1: break
            dp[0][j] = 1
        for i in range(1, n):
            if obstacleGrid[i][0] == 1: break
            dp[i][0] = 1
            
        for i in range(1, n):
            for j in range(1, m):
                if obstacleGrid[i][j] == 1: 
                    continue
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
        return dp[-1][-1]
