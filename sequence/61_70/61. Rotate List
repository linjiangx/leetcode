#
#
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def rotateRight(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        cur = head
        le = 0
        while cur:
            cur = cur.next
            le += 1
        if le == 0 or k == 0:
            return head
        k = k % le
        if k == le or k == 0:
            return head
        tail = head
        for i in range(le - 1):
            tail = tail.next
        cur = head
        for i in range(le - k - 1):
            cur = cur.next
        new_head = cur.next
        cur.next = None
        tail.next = head
        return new_head
        
        
