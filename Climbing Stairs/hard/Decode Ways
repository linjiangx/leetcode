#
class Solution:
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """
        n = len(s)
        if n == 0: return 0
        if n == 1:
            if s[0] == "0": return 0
            else: return 1
        dp = [0]*n # dp[i] stores the ways to decode ends at [i]
        
        # setting up the base cases: 0 and 1
        dp[0] = 1 if int(s[0]) != 0 else 0
        cb = int(s[:2])
        if 10 <= cb <= 26:
            dp[1] = dp[0] + 1
        else: dp[1] = dp[0]
        if s[1] == "0": dp[1] -= dp[0]
            
    # if the previous char and the current char forms a number between 10 and 26, all the dp[i-2] ways can be used (plus the number 
    # s[i-1:i+1]), else only the dp[i-1] ways gets passed. Need to be careful when s[i] == "0", this case dp[i] loses all the ways 
    # from dp[i-1], because "0" is invalid by its own.
        for i in range(2,n):
            if 10 <= int(s[i-1:i+1]) <= 26:
                dp[i] = dp[i-2] + dp[i-1]
            else: dp[i] = dp[i-1]
            if s[i] == "0": dp[i] -= dp[i-1]
        print(dp)
        return dp[n-1]
#
#
#
#
