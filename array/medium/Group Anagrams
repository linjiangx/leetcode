#单词里的字母的种类和数目没有改变，只是改变了字母的排列顺序
#先将原List单个元素分别排序，再与原List做一个zip，最后生成字典
class Solution:
    def groupAnagrams(self, strs):
        """
        :type strs: List[str]
        :rtype: List[List[str]]
        """
        # sorted会将string转化为list
        sorted_words = (''.join(sorted(w)) for w in strs)
        ana_dict = {}
        for w, sw in zip(strs, sorted_words):
            if sw not in ana_dict: ana_dict[sw] = [w]
            else: ana_dict[sw].append(w)
        return [ana_dict[k] for k in ana_dict]
        
#这个容易理解点
class Solution:
    def groupAnagrams(self, strs):
        """
        :type strs: List[str]
        :rtype: List[List[str]]
        """
        aa=strs[:]  #这里浅复制与深复制
        le=len(aa)
        for i in range(le):
            aa[i]=''.join(sorted(aa[i]))
        dic={}
        for i in range(len(strs)):
            if aa[i] not in dic:
                dic[aa[i]]=[strs[i]]  #这里开始就要构建list，不然后面无法append
            else:
                dic[aa[i]].append(strs[i])
        # return list(memo.values())一句顶四句
        res=[]
        for key in dic:
            res.append(dic[key])
        return res
        
#
class Solution:
    def groupAnagrams(self, strs):
        """
        :type strs: List[str]
        :rtype: List[List[str]]
        """
        from collections import defaultdict
        
        mem = defaultdict(list)
        
        for s in strs:
            temp=sorted(s)
            mem[''.join(temp)] += [s]
        
        return list(mem.values())
