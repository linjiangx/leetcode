#单词里的字母的种类和数目没有改变，只是改变了字母的排列顺序
#先将原List单个元素分别排序，再与原List做一个zip，最后生成字典
class Solution:
    def groupAnagrams(self, strs):
        """
        :type strs: List[str]
        :rtype: List[List[str]]
        """
        # sorted会将string转化为list
        sorted_words = (''.join(sorted(w)) for w in strs)
        ana_dict = {}
        for w, sw in zip(strs, sorted_words):
            if sw not in ana_dict: ana_dict[sw] = [w]
            else: ana_dict[sw].append(w)
        return [ana_dict[k] for k in ana_dict]
        
#这个容易理解点
class Solution:
    def groupAnagrams(self, strs):
        """
        :type strs: List[str]
        :rtype: List[List[str]]
        """
        aa=strs[:]  #这里浅复制与深复制
        le=len(aa)
        for i in range(le):
            aa[i]=''.join(sorted(aa[i]))
        dic={}
        for i in range(len(strs)):
            if aa[i] not in dic:
                dic[aa[i]]=[strs[i]]  #这里开始就要构建list，不然后面无法append
            else:
                dic[aa[i]].append(strs[i])
        # return list(memo.values())一句顶四句
        res=[]
        for key in dic:
            res.append(dic[key])
        return res
        
#
import collections
class Solution(object):
    def groupAnagrams(self, strs):
        ans= collections.defaultdict(list)
        for s in strs:
            ans[tuple(sorted(s))].append(s)
        return ans.values()

#
class Solution(object):
    def groupAnagrams(self, strs):
        # sorted string一样则为同样，所以可以将sorted word作为key
        dictionary = {}
        for s in strs:
            key = tuple(sorted(s))  # 出错点：sorted之后会变成list，不hashable，所以不能做key，得转成tuples
            dictionary[key] = dictionary.get(key, [])  # 出错点：不能在后面直接加append，得下面再写一行，因为空[]一边创建一边append会出错
            dictionary[key].append(s)
        result = []
        for key, value in dictionary.items():
            result.append(dictionary[key])
        return result
