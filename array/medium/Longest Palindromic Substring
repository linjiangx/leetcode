#穷举，从最大长度往下遍历,超时
class Solution(object):
    def longestPalindrome(self, s):
        """ :type s: str :rtype: str """
        def palindrome(s,left,right):
            while left >= 0 and right < len(s) and s[left] == s[right]:
                left -= 1
                right += 1
            return s[left+1:right]

        ans = ''

        for i in range(len(s)):
            pal1 = palindrome(s,i,i)
            if len(pal1) > len(ans): ans = pal1
            pal2 = palindrome(s,i, i + 1)
            if len(pal2) > len(ans): ans = pal2

        return ans
                
#有点东西，没看懂
class Solution:
    def longestPalindrome(self, s):
        if len(s)==0:
        	return ''
        maxLen=1
        start=0
        for i in range(len(s)):
        	if i-maxLen >=1 and s[i-maxLen-1:i+1]==s[i-maxLen-1:i+1][::-1]:
        		start=i-maxLen-1
        		maxLen+=2
        		continue

        	if i-maxLen >=0 and s[i-maxLen:i+1]==s[i-maxLen:i+1][::-1]:
        		start=i-maxLen
        		maxLen+=1
        return s[start:start+maxLen]
            
