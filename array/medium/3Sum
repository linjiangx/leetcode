#方法可行，就是超时了,我这里借鉴了2 sum里面字典的办法 
class Solution:               
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        res=[]
        len1=len(nums)
        for i in range(len1):
            dict={}
            target = -nums[i]
            a=nums.pop(i)
            for j in range(len(nums)):
                if nums[j] in dict:
                    b=sorted([nums[j],nums[dict[nums[j]]],a])
                    if b not in res:
                        res.append(b)
                else:
                    dict[target-nums[j]]=j
            nums.insert(i,a)
        return res
        
#比较直观的办法，先排序，然后固定一个，让另外两个移动        
def threeSum(self, nums):
    res = []
    nums.sort()
    for i in range(len(nums)-2):
        if i > 0 and nums[i] == nums[i-1]:
            continue
        l, r = i+1, len(nums)-1
        while l < r:
            s = nums[i] + nums[l] + nums[r]
            if s < 0:
                l +=1 
            elif s > 0:
                r -= 1
            else:
                res.append((nums[i], nums[l], nums[r]))
                while l < r and nums[l] == nums[l+1]:
                    l += 1
                while l < r and nums[r] == nums[r-1]:
                    r -= 1
                l += 1; r -= 1
    return res  


            
