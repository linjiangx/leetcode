# 矩阵螺旋输出
# 每次输出第一行，然后将矩阵逆时针旋转90度
class Solution(object):
    def spiralOrder(self, matrix):
        res = []
        while len(matrix)>0:
            res+=matrix.pop(0)
            matrix = list(map(list, zip(*matrix[::-1])))   #顺时针90度
            matrix = list(map(list, zip(*matrix[::-1])))
            matrix = list(map(list, zip(*matrix[::-1])))
        return res

#先每行逆序，再转置
class Solution(object):
    def spiralOrder(self, matrix):
        res = []
        while len(matrix):
            res+=matrix.pop(0)
            for i in range(len(matrix)): matrix[i][:] = (matrix[i])[::-1]
            matrix = list(map(list, zip(*matrix)))
        return res
        
#先转置，再整体逆序
class Solution(object):
    def spiralOrder(self, matrix):
        ans = []
        while matrix:
            ans += matrix[0]
            matrix = [*zip(*matrix[1:])][::-1]
        return ans 
        
#实在方法
class Solution:
    def spiralOrder(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[int]
        """
        if len(matrix) == 0:
            return matrix
        rows = len(matrix) - 1
        cols = len(matrix[0]) - 1
        res = []
        i, j = 0, 0
        while(i <= rows/2 and j <= cols/2):
            # [i, rows - i], [j, cols -j]
            if i == rows - i:
                res += matrix[i][j:cols-j+1]
            elif j == cols - j:
                for k in range(i, rows-i+1):
                    res.append(matrix[k][j])
            else:
                # top:
                res += matrix[i][j:cols-j]
                # right:
                for k in range(i, rows-i+1):
                    res.append(matrix[k][cols-j])
                # bottom:
                res += list(reversed(matrix[rows-i][j:cols-j]))
                # left:
                for k in range(rows-i-1, i, -1):
                    res.append(matrix[k][j])
            i += 1
            j += 1
        return res
