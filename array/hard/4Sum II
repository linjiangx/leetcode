#
class Solution(object):
    def fourSumCount(self, A, B, C, D):
        """
        :type A: List[int]
        :type B: List[int]
        :type C: List[int]
        :type D: List[int]
        :rtype: int
        """
        rec = {}
        N = len(A)
        for i in range(N):
            for j in range(N):
                sum2 = A[i]+B[j]
                if not sum2 in rec:
                    rec[sum2] = 1
                else:
                    rec[sum2] += 1
        res = 0
        for i in range(N):
            for j in range(N):
                sum2 = C[i]+D[j]
                if -sum2 in rec:
                    res += rec[-sum2]
        return res           
        
        
#
class Solution:
    def fourSumCount(self, A, B, C, D):
        """
        :type A: List[int]
        :type B: List[int]
        :type C: List[int]
        :type D: List[int]
        :rtype: int
        """
        d1 = collections.Counter()
        d2 = collections.Counter()
        
        for a in A:
            for b in B:
                d1[a+b] += 1
        
        for c in C:
            for d in D:
                d2[c+d] += 1
                
        res = collections.Counter()
        for k in d1:
            if -k in d2:
                res[k] = d1[k] * d2[-k]
                
        return sum([val for val in res.values()])
        
        
#将方法2里面的counter类换成字典表示
class Solution:
    def fourSumCount(self, A, B, C, D):
        """
        :type A: List[int]
        :type B: List[int]
        :type C: List[int]
        :type D: List[int]
        :rtype: int
        """
        dic1={}
        dic2={}
        
        for a in A:
            for b in B:
                if a+b not in dic1:
                    dic1[a+b]=1
                else:
                    dic1[a+b]+=1
        
        for c in C:
            for d in D:
                if c+d not in dic2:
                    dic2[c+d]=1
                else:
                    dic2[c+d]+=1
                    
                
        res = 0
        for k in dic1:
            if -k in dic2:
                res += dic1[k] * dic2[-k]
                
        return res
