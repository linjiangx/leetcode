#1.笨办法，复杂度O(N*k)
class Solution:
    def rotate(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        for i in range(k):
            a = nums.pop(-1)
            nums.insert(0, a)

#2.直接放置，可能存在额外空间的问题
class Solution(object):
    def rotate(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        if k > len(nums):
            k = k % len(nums)
        nums[:k], nums[k:] = nums[-k:], nums[:len(nums) - k]  #或者nums[:] = nums[-k:] + nums[:len(nums) - k]
        
#3.先整体逆序，再分别将前面的逆序，将后面的逆序
class Solution(object):
    def rotate(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        if k > len(nums):
            k = k % len(nums)
        nums[:] = nums[::-1]
        nums[:k] = nums[:k][::-1]
        nums[k:] = nums[k:][::-1]



