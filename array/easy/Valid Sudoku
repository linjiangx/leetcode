#需要掌握二维数组创建a=[[0 for x in range(10)] for y in range(10)]
#掌握列表替换：rep = ['4' if x == '1' else x for x in lst]，将List里面的1替换为4
class Solution:
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        flag=1
        for i in range(9):
            for j in range(9):
                if board[i][j]=='.':
                    board[i][j]=0
                else:
                    board[i][j]=int(board[i][j])
        
        for e_list in board:
            if sum(e_list)-sum(set(e_list))!=0:
                flag=0
                
        temp=[]
        for i in range(3):
            for j in range(3):
                temp.append(board[3*i][3*j])
                temp.append(board[3*i][3*j+1])
                temp.append(board[3*i][3*j+2])
                temp.append(board[3*i+1][3*j])
                temp.append(board[3*i+1][3*j+1])
                temp.append(board[3*i+1][3*j+2])
                temp.append(board[3*i+2][3*j])
                temp.append(board[3*i+2][3*j+1])
                temp.append(board[3*i+2][3*j+2])
                if sum(temp)-sum(set(temp))!=0:
                    flag=0
                temp=[]
        boardT=[[0 for x in range(9)] for y in range(9)]
        for i in range(9):
            for j in range(9):
                boardT[i][j]=board[j][i]
        for e_list in boardT:
            if sum(e_list)-sum(set(e_list))!=0:
                flag=0
        if flag:
            return True
        else:
            return False
                        
#这个可读性更高
def isValidSudoku(self, board):
    return (self.is_row_valid(board) and
            self.is_col_valid(board) and
            self.is_square_valid(board))

def is_row_valid(self, board):
    for row in board:
        if not self.is_unit_valid(row):
            return False
    return True

def is_col_valid(self, board):
    for col in zip(*board):
        if not self.is_unit_valid(col):
            return False
    return True
    
def is_square_valid(self, board):
    for i in (0, 3, 6):
        for j in (0, 3, 6):
#这个地方值得参考来处理二维数组        
            square = [board[x][y] for x in range(i, i + 3) for y in range(j, j + 3)]
            if not self.is_unit_valid(square):
                return False
    return True
    
def is_unit_valid(self, unit):
#这里直接将'.'给丢掉了
    unit = [i for i in unit if i != '.']
    return len(set(unit)) == len(unit)
