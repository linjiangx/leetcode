#
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        if headA==None or headB==None:
            return None
        a=headA
        b=headB
        la=1
        lb=1
        while a.next:
            la+=1
            a=a.next
        while b.next:
            lb+=1
            b=b.next
        if a==b:
            if la>lb:
                for i in range(la-lb):
                    headA=headA.next
                while headA:
                    if headA==headB:
                        return headA
                    else:
                        headA=headA.next
                        headB=headB.next               
            elif la<lb:
                for i in range(lb-la):
                    headB=headB.next
                while headB:
                    if headA==headB:
                        return headB
                    else:
                        headA=headA.next
                        headB=headB.next
            else:
                while headA:
                    if headA==headB:
                        return headA
                    else:
                        headA=headA.next
                        headB=headB.next            
        else:
            return None
        

#
class Solution(object):
    def getIntersectionNode(self, headA, headB):
        if headA is None or headB is None:
            return None
        ha=headA
        hb=headB
        while ha is not hb:
            ha=headB if ha is None else ha.next
            hb=headA if hb is None else hb.next
        return ha
#
#
