#
# Definition for singly-linked list with a random pointer.
# class RandomListNode(object):
#     def __init__(self, x):
#         self.label = x
#         self.next = None
#         self.random = None

class Solution(object):
    def copyRandomList(self, head):
        """
        :type head: RandomListNode
        :rtype: RandomListNode
        """
        temp = RandomListNode(0)
        p = temp
        while head:
            p.next = RandomListNode(head.label)     
            if head.random != None:
                p.next.random = RandomListNode(head.random.label)
            head = head.next
            p = p.next        
        return temp.next
#
class Solution:
# @param head, a RandomListNode
# @return a RandomListNode
    def copyRandomList(self, head):
        dic = collections.defaultdict(lambda: RandomListNode(0))
        dic[None] = None
        n = head
        while n:
            dic[n].label = n.label
            dic[n].next = dic[n.next]
            dic[n].random = dic[n.random]
            n = n.next
        return dic[head]
#
