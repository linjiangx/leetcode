#
#
#
class TicTacToe:
    class LineStatus:
        def __init__(self):
            self._status = -1
            self._count = 0
        def set_status(self,s):
            self._status = s
        def get_status(self):
            return self._status
        def add_count(self):
            self._count += 1
        def get_count(self):
            return self._count 
        
    def line_status_check(self,index,player):
     
        if self.line_status[index].get_status() == 0:
            return 0
        
        elif self.line_status[index].get_status() == -1:
            self.line_status[index].set_status(player)
            self.line_status[index].add_count()
            if self.line_status[index].get_count() == self._N:
                return player
            
        elif self.line_status[index].get_status() == player:
            self.line_status[index].add_count()
            if self.line_status[index].get_count() == self._N:
                return player
            
        else:
            self.line_status[index].set_status(0)
            return 0
            
        return 0
    

    def __init__(self, n):
        """
        Initialize your data structure here.
        :type n: int
        """
      
        self.line_status = [self.LineStatus() for i in range(2*n+2)]
        self._N = n
        
        

    def move(self, row, col, player):
        """
        Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins.
        :type row: int
        :type col: int
        :type player: int
        :rtype: int
        """
        
        row_status = self.line_status_check(row,player)
        if row_status == player:
            return player
        col_status = self.line_status_check(col+self._N,player)
        if col_status == player:
            return player 
        if row == col:
            diagonal_forward = self.line_status_check(-2,player)
            if diagonal_forward == player:
                return player 
            
        if row == self._N - col-1:
            diagonal_backward = self.line_status_check(-1,player)
            if diagonal_backward == player:
                return player
         
            
        return 0
		```
