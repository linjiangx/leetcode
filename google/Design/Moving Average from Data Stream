#
class MovingAverage(object):

    def __init__(self, size):
        """
        Initialize your data structure here.
        :type size: int
        """
        self.queue=[]
        self.size=size
        self.count=0
        self.sum=0

    def next(self, val):
        """
        :type val: int
        :rtype: float
        """
        if self.count<self.size:
            self.sum+=val
            self.queue.append(val)
            self.count+=1
            self.count*=1.0
            return self.sum/self.count
        else:
            temp=self.queue.pop(0)
            self.sum=self.sum-temp+val
            self.queue.append(val)
            return self.sum/self.count


# Your MovingAverage object will be instantiated and called as such:
# obj = MovingAverage(size)
# param_1 = obj.next(val)
#
import collections

class MovingAverage(object):

    def __init__(self, size):
        """
        Initialize your data structure here.
        :type size: int
        """
        self.queue = collections.deque(maxlen=size)
        

    def next(self, val):
        """
        :type val: int
        :rtype: float
        """
        queue = self.queue
        queue.append(val)
        return float(sum(queue))/len(queue)
        


# Your MovingAverage object will be instantiated and called as such:
# obj = MovingAverage(size)
# param_1 = obj.next(val)
#
#
