#
#
class Solution(object):
    def shortestDistance(self, grid):
        if not grid or not grid[0]: return -1
        M, N, buildings = len(grid), len(grid[0]), sum(val for line in grid for val in line if val == 1)
        hit, distSum = [[0] * N for i in range(M)], [[0] * N for i in range(M)]

        def BFS(start_x, start_y):
            visited = [[False] * N for k in range(M)]
            visited[start_x][start_y], count1, queue = True, 1, collections.deque([(start_x, start_y, 0)])
            while queue:
                x, y, dist = queue.popleft()
                for i, j in ((x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)):
                    if 0 <= i < M and 0 <= j < N and not visited[i][j]:
                        visited[i][j] = True
                        if not grid[i][j]:
                            queue.append((i, j, dist + 1))
                            hit[i][j] += 1
                            distSum[i][j] += dist + 1
                        elif grid[i][j] == 1:
                            count1 += 1
            return count1 == buildings

        for x in range(M):
            for y in range(N):
                if grid[x][y] == 1:
                    if not BFS(x, y): return -1
        return min(
            [distSum[i][j] for i in range(M) for j in range(N) if not grid[i][j] and hit[i][j] == buildings] or [-1])
#
class Solution(object):
    def shortestDistance(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        m, n = len(grid), len(grid[0])
        dist = [[0] * n for _ in range(m)]
        dirs = [(-1, 0), (1, 0), (0, 1), (0, -1)]
        counts = [[0] * n for _ in range(m)]
        buildingCnt = 0 
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    buildingCnt += 1
        
        
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    if not self.bfs(grid, i, j, dirs, dist, buildingCnt, counts):
                        return -1 
        
        res = float('inf')
        for i in range(m):
            for j in range(n):
                if not grid[i][j] and counts[i][j] == buildingCnt:
                    res = min(res, dist[i][j])
        return res if res < float('inf') else -1
                 
        
                    
        
    
    
    def bfs(self, grid, i, j, dirs, dist, buildingCnt, counts):
        m, n = len(grid), len(grid[0])
        res = float('inf')
        from collections import deque
        count = 1 
        q = deque([(i,j,0)])
        visited = set([i*n + j])
        while q:
            x, y, d = q.popleft()
            for dx, dy in dirs:
                x_, y_ = x + dx, y + dy 
                if 0 <= x_ < m and 0 <= y_ < n and x_*n + y_ not in visited:
                    visited.add(x_*n + y_)
                    if grid[x_][y_] == 1:
                        count += 1 
                    elif grid[x_][y_] == 0:
                        q.append((x_, y_, d + 1))
                        dist[x_][y_] += d + 1
                        res = min(res, dist[x_][y_])
                        counts[x_][y_] += 1 
        if count == buildingCnt:
            return res 
        return None 
