#
class Solution(object):
    def findDiagonalOrder(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[int]
        """
        m = len(matrix)
        if m == 0:
            return []
        n = len(matrix[0])
        if n == 0:
            return []
        segs = []
        for i in range(m):
            seg = self.genSeg(matrix, i, 0)
            segs.append(seg)
        for j in range(1, n):
            seg = self.genSeg(matrix, m - 1, j)
            segs.append(seg)

        ans = []
        for i in range(len(segs)):
            if i % 2 == 0:
                for num in segs[i]:
                    ans.append(num)
            else:  # reverse the direction
                for num in reversed(segs[i]):
                    ans.append(num)
        return ans

    # given a start position, go along bottomLeft -> topRight
    def genSeg(self, matrix, startRow, startCol):
        seg = []
        i = startRow
        j = startCol
        while i >= 0 and j < len(matrix[0]):
            curr = matrix[i][j]
            seg.append(curr)
            i -= 1
            j += 1
        return seg
#
class Solution(object):
    def findDiagonalOrder(self, matrix):     
        result = []
        if not matrix:
            return result
        num_rows = len(matrix)
        num_columns = len(matrix[0])
        row = 0
        column = 0
        direction = 0
        dirs = [[-1, 1],[1, -1]]

        for i in range (0, num_rows * num_columns):
          result.append(matrix[row][column])
          row += dirs[direction][0]
          column += dirs[direction][1]

          if row >= num_rows:
            row = num_rows - 1
            column += 2
            direction = 1 - direction
          if column >= num_columns:
            column = num_columns - 1
            row += 2
            direction = 1 - direction
          if row < 0:
            row = 0
            direction = 1 - direction
          if column < 0:
            column = 0
            direction = 1 - direction

        return result
#
class Solution(object):
    def findDiagonalOrder(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[int]
        """
        if not matrix or not matrix[0]: return []
        m,n = len(matrix), len(matrix[0])
        res = []
        r,c = 0,0
        for i in range(m*n):
            res.append(matrix[r][c])
            if (r+c)%2==0:
                if c==n-1: r+=1
                elif r==0: c+=1
                else: r-=1; c+=1
            else:
                if r==m-1: c+=1
                elif c==0: r+=1
                else: r+=1; c-=1
        return res
#
