#
class Solution(object):
    def pacificAtlantic(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[List[int]]
        """
        if not matrix:
            return []
        m, n = len(matrix), len(matrix[0])
        mat1 = [[0]*n for _ in range(m)]
        for i in range(m):
            mat1[i][0] = 1
        for j in range(n):
            mat1[0][j] = 1
        stack = [(i, 0) for i in range(m)] + [(0, j) for j in range(1,n)]
        for i, j in stack:
            for a, b in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:
                if a >= 0 and a < m and b >= 0 and b < n and mat1[a][b]==0 and matrix[a][b] >= matrix[i][j]:
                    stack.append((a, b))
                    mat1[a][b] = 1

        stack = []
        solu = []
        for i in range(m):
            mat1[i][n-1] += 2
            stack.append((i, n-1))
            if mat1[i][n-1] == 3:
                solu.append([i, n-1])
        for j in range(n-1):
            mat1[m-1][j] += 2
            stack.append((m-1, j))
            if mat1[m-1][j] == 3:
                solu.append([m-1, j])
                
        for i, j in stack:
            for a, b in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:
                if a >= 0 and a < m and b >= 0 and b < n and mat1[a][b] < 2 and matrix[a][b] >= matrix[i][j]:
                    stack.append((a, b))
                    mat1[a][b] += 2
                    if mat1[a][b] == 3:
                        solu.append([a, b])
        return solu
#
#
class Solution:
    def pacificAtlantic(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[List[int]]
        """
        ans = []
        if not matrix or not matrix[0]:
            return ans
        
        self.nRow, self.nCol = len(matrix), len(matrix[0])
        self.matrix = matrix
        paVisited = [[False] * self.nCol for _ in range(self.nRow)]
        atVisited = [[False] * self.nCol for _ in range(self.nRow)]
        
        for r in range(self.nRow):
            self.dfs(r, 0, paVisited)
            self.dfs(r, self.nCol-1, atVisited)
        
        for c in range(self.nCol):
            self.dfs(0, c, paVisited)
            self.dfs(self.nRow-1, c, atVisited)
            
        for r in range(self.nRow):
            for c in range(self.nCol):
                if paVisited[r][c] and atVisited[r][c]:
                    ans += [[r,c]]
        return ans
            
        
    def dfs(self, r, c, visited):
        if not visited[r][c]:
            visited[r][c] = True
            for (dr, dc) in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
                r_temp, c_temp = r+dr, c+dc
                if 0 <= r_temp < self.nRow and 0 <= c_temp < self.nCol and self.matrix[r][c] <= self.matrix[r_temp][c_temp]:
                    self.dfs(r_temp, c_temp, visited)
#
