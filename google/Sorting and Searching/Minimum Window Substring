#
class Solution(object):
    def minWindow(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        
        if None == t : return ""
        if len(t) == 1:
            if t[0] in s : return t[0]
            else : return ""
        
        need = collections.defaultdict(int) 
        for c in t: need[c] += 1

        missing = len(t)                         #total number of chars we care
        start, end = 0, 0
        i = 0
        for j, char in enumerate(s, 1):          #index j from 1
            if need[char] > 0:
                missing -= 1
            need[char] -= 1
            #print j, missing, need
            if missing == 0:                     #match all chars
                #print "-", j, missing, s[i:j], need
                while i < j and need[s[i]] < 0:  #remove chars to find the real start
                    need[s[i]] += 1
                    i += 1
                need[s[i]] += 1                  #make sure the first appearing char satisfies need[char]>0
                missing += 1                     #we missed this first char, so add missing by 1
                if end == 0 or j-i < end-start:  #update window
                    #print "  -", i, j, missing, s[i:j], need
                    start, end = i, j
                i += 1                           #update i to start+1 for next window
        return s[start:end]

#
class Solution(object):
    def minWindow(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        # sliding window 
        
        dic = {}
        for sym in t:
            if sym in dic:
                dic[sym] += 1
            else:
                dic[sym] = 1
        
        tlen = len(t)
        cntr = 0
        j = 0
        minlen = float('inf')
        rstr = ''
        for i, sym in enumerate(s):
            if sym in dic:
                dic[sym] -= 1
                if dic[sym] >= 0:
                    cntr += 1
            while cntr >= tlen:
                if s[j] in dic:
                    dic[s[j]] += 1
                    if dic[s[j]] > 0:
                        cntr -= 1
                        if (i-j) < minlen:
                            rstr = s[j:i+1]
                            minlen = i-j
                j += 1
        return rstr
#
The current window is s[i:j] and the result window is s[I:J]. 
In need[c] I store how many times I need character c (can be negative) 
and missing tells how many characters are still missing. 
In the loop, first add the new character to the window. 
Then, if nothing is missing, remove as much as possible from the window start and then update the result.
#
class Solution(object):
    def minWindow(self, s, t):
        need, missing = collections.Counter(t), len(t)
        i = I = J = 0
        for j, c in enumerate(s, 1):
            missing -= need[c] > 0
            need[c] -= 1
            if not missing:
                while i < j and need[s[i]] < 0:
                    need[s[i]] += 1
                    i += 1
                if not J or j - i <= J - I:
                    I, J = i, j
        return s[I:J]
