#
#
class Solution(object):
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        def helper(i, j):
            if i < 0:
                return j + 1
            if j < 0:
                return i + 1
            if distance[i][j] == -1:
                if word1[i] == word2[j]:
                    distance[i][j] = helper(i-1, j-1)
                else:
                    sub = helper(i-1, j-1)
                    add = helper(i-1, j)
                    delete = helper(i, j-1)
                    distance[i][j] = 1 + min(sub, add, delete)
                    
            return distance[i][j]
        
        distance = [[-1] * len(word2) for _ in word1]
        return helper(len(word1) - 1, len(word2) - 1)
#
class Solution(object):
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        
        m = len(word1)
        n = len(word2)
        
        dp = [[-1]*(n) for _ in range(m)]
        
        def helper(i, j):
            if i < 0:
                return j+1
            
            elif j < 0:
                return i+1
            
            elif dp[i][j] == -1:
                if word1[i] == word2[j]:
                    dp[i][j] = helper(i-1, j-1)
                    
                else:                    
                    dp[i][j] = 1 + min( helper(i-1, j-1), helper(i-1, j), helper(i, j-1))
            return dp[i][j]
        
        return helper(m-1, n-1)
#
