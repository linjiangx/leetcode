#
class Solution:
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if (j - 1 >= 0) and (i - 1 >= 0):
                    grid[i][j] += min(grid[i][j - 1], grid[i-1][j])
                elif (j - 1 < 0) and (i - 1 >= 0):
                    grid[i][j] += grid[i-1][j]                   
                elif (j - 1 >= 0) and (i - 1 < 0):  
                    grid[i][j] += grid[i][j - 1]
                
        return grid[i][j]
#
class Solution(object):
    def minPathSum(self, grid):
        if not grid: return None
        m, n = len(grid), len(grid[0])
        for i in range(m):
            for j in range(n):
                if i == 0 and j == 0: continue
                elif i == 0: grid[i][j] += grid[i][j-1]
                elif j == 0: grid[i][j] += grid[i-1][j]
                else: grid[i][j] += min(grid[i-1][j], grid[i][j-1])
        return grid[-1][-1]
#
class Solution:
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        for i in range(len(grid)):
            
            for j in range(len(grid[0])):
                if i == 0 and j == 0:
                    continue
                if i == 0:
                    grid[i][j] = grid[i][j-1] + grid[i][j]
                elif j == 0:
                    grid[i][j] = grid[i-1][j] + grid[i][j]
                else:
                    grid[i][j] = min(grid[i-1][j],grid[i][j-1]) + grid[i][j]
                
        return grid[-1][-1]
#
