#
class Solution(object):
    def iterator(self, n):
        if n == 1:
            yield "0"
            yield "1"
            yield "8"
            return
        elif n == 0:
            yield ""
            return
        
        for res in self.iterator(n-2):
            yield "0" + res + "0"
            yield "1" + res + "1"
            yield "8" + res + "8"
            yield "6" + res + "9"
            yield "9" + res + "6"
         
    def findStrobogrammatic(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        if n == 0: return ""
        if n == 1: return ["0", "1", "8"]
        return [i for i in self.iterator(n) if i[0] != '0']

#
class Solution(object):
    def findStrobogrammatic(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        evenMidCandidate = ["11","69","88","96", "00"]
        oddMidCandidate = ["0", "1", "8"]
        if n == 1:
            return oddMidCandidate
        if n == 2:
            return evenMidCandidate[:-1]
        if n % 2:
            pre, midCandidate = self.findStrobogrammatic(n-1), oddMidCandidate
        else: 
            pre, midCandidate = self.findStrobogrammatic(n-2), evenMidCandidate
        premid = (n-1)/2
        return [p[:premid] + c + p[premid:] for c in midCandidate for p in pre]
